def check_sum_first_i_equals_i(numbers):

    if not numbers:  # Empty list - no conditions to check
        return True
    for i in range(1, len(numbers) + 1):
        sum_first_i = sum(numbers[:i])
        if sum_first_i != i:
            return False
    
    return True


def detailed_analysis(numbers):
    print(f"Input: {numbers}")
    print(f"Length: {len(numbers)}")
    print("-" * 50)
    
    if not numbers:
        print("Empty list - condition vacuously true")
        return True
    
    all_valid = True
    for i in range(1, len(numbers) + 1):
        first_i_elements = numbers[:i]
        sum_first_i = sum(first_i_elements)
        is_valid = sum_first_i == i
        
        status = "✓" if is_valid else "✗"
        print(f"i={i}: sum({first_i_elements}) = {sum_first_i}, equals {i}? {status}")
        
        if not is_valid:
            all_valid = False
    
    print("-" * 50)
    print(f"Overall result: {all_valid}")
    print()
    
    return all_valid


def analyze_pattern(numbers):
    if not numbers:
        return
    
    print("Pattern Analysis:")
    print("-" * 30)
    running_sum = 0
    for i, num in enumerate(numbers, 1):
        running_sum += num
        required_sum = i
        difference = running_sum - required_sum
        
        print(f"Position {i}: element={num}, running_sum={running_sum}, "
              f"required={required_sum}, difference={difference}")
    if len(numbers) > 1:
        differences = [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]
        print(f"Element differences: {differences}")
        
        if all(d == differences[0] for d in differences):
            print(f"Elements form arithmetic sequence with difference {differences[0]}")
        else:
            print("Elements don't form a simple arithmetic sequence")
    
    print()


def test_function():
    test_cases = [
        ([0, 1, 2, 3, 4, 5], False),
        ([1, 1, 1, 1, 1, 1], True),
        ([2, 2, 2, 2, 2], False),
        ([1], True),              
        ([2], False),             
        ([1, 1], True),           
        ([1, 0], False),          
        ([0], False),             
        ([], True),              
        ([1, 1, 1], True),        
        ([3, -1, 0], True),       
    ]
    test_cases[-1] = ([3, -1, 0], False)
    
    print("Testing Sum of First i Equals i:")
    print("=" * 60)
    
    for i, (test_list, expected) in enumerate(test_cases, 1):
        print(f"\nTest Case {i}:")
        print("=" * 60)
        
        result = check_sum_first_i_equals_i(test_list)
        status = "✓" if result == expected else "✗"
        
        print(f"Status: {status}")
        detailed_analysis(test_list)
        
        if len(test_list) <= 6:  # Only show pattern analysis for shorter lists
            analyze_pattern(test_list)
        
        print(f"Expected: {expected}, Got: {result}")
        
        if result != expected:
            print("❌ MISMATCH!")
        else:
            print("✅ CORRECT!")
        print()


def find_valid_sequences(max_length=6):
    print(f"Finding valid sequences up to length {max_length}:")
    print("-" * 50)
    
    for length in range(1, max_length + 1):
        print(f"\nLength {length} sequences:")
        
        if length >= 1:
            sequence = [1]  # First element must be 1
            
            for i in range(2, length + 1):
                next_element = i - sum(sequence)
                sequence.append(next_element)
            is_valid = check_sum_first_i_equals_i(sequence)
            print(f"  {sequence} - Valid: {is_valid}")


def mathematical_analysis():
    print("Mathematical Analysis:")
    print("=" * 50)
    print("For a sequence [a₁, a₂, a₃, ..., aₙ] to satisfy the condition:")
    print("- Sum of first 1 element = a₁ = 1")
    print("- Sum of first 2 elements = a₁ + a₂ = 2")
    print("- Sum of first 3 elements = a₁ + a₂ + a₃ = 3")
    print("- ...")
    print("- Sum of first n elements = a₁ + a₂ + ... + aₙ = n")
    print()
    print("This gives us:")
    print("- a₁ = 1")
    print("- a₂ = 2 - a₁ = 2 - 1 = 1") 
    print("- a₃ = 3 - (a₁ + a₂) = 3 - 2 = 1")
    print("- a₄ = 4 - (a₁ + a₂ + a₃) = 4 - 3 = 1")
    print("- ...")
    print()
    print("Wait, that's not right. Let me recalculate:")
    print("- a₁ = 1")
    print("- a₂ = 2 - 1 = 1")
    print("- a₃ = 3 - (1 + 1) = 1")
    print("- a₄ = 4 - (1 + 1 + 1) = 1")
    print()
    print("So the pattern should be [1, 1, 1, ...] for any length!")
    print("But let's verify with a different approach...")
    print()
    print("Alternative pattern: [1, 1, 1, 1, 1, 1]")
    print("- sum([1]) = 1 ✓")
    print("- sum([1,1]) = 2 ✓") 
    print("- sum([1,1,1]) = 3 ✓")
    print("- etc.")
if __name__ == "__main__":
    test_function()
    find_valid_sequences(8)
    print()
    mathematical_analysis()
    
    print("\n" + "=" * 60)
    print("Interactive Example:")
    print("=" * 60)
    
    predicted_sequence = [1] * 7
    print(f"Testing predicted sequence: {predicted_sequence}")
    result = check_sum_first_i_equals_i(predicted_sequence)
    print(f"Result: {result}")
    
    if result:
        print("✅ Mathematical analysis confirmed!")
    else:

        print("❌ Mathematical analysis needs revision!")
